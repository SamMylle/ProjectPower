/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import avro.ProjectPower.Client;
import client.exception.AbsentException;
import client.exception.TakeoverException;
import client.exception.MultipleInteractionException;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import client.DistUser;
import gui.PanelInterface;
import java.util.Calendar;
import java.text.SimpleDateFormat;
import java.util.Timer;
import java.util.TimerTask;

/**
 *
 * @author federico
 */
public class ClientsPanel extends javax.swing.JPanel implements PanelInterface {

    private DistUser f_user;
    private Timer f_timer;
    /**
     * Creates new form ClientsPanel
     */
    public ClientsPanel(DistUser user) {
        
        initComponents();
        
        f_user = user;
        txtaNotifications.append("Notifications:\n\n");
        f_timer = new Timer();
        f_timer.schedule(new updateNotifications(), 50, 1000);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlNotifications = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaNotifications = new javax.swing.JTextArea();
        mainWindow = new javax.swing.JScrollPane();
        tblClients = new javax.swing.JTable();
        btnGetClients = new javax.swing.JButton();

        txtaNotifications.setEditable(false);
        txtaNotifications.setColumns(20);
        txtaNotifications.setRows(5);
        jScrollPane1.setViewportView(txtaNotifications);

        javax.swing.GroupLayout pnlNotificationsLayout = new javax.swing.GroupLayout(pnlNotifications);
        pnlNotifications.setLayout(pnlNotificationsLayout);
        pnlNotificationsLayout.setHorizontalGroup(
            pnlNotificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
        );
        pnlNotificationsLayout.setVerticalGroup(
            pnlNotificationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        mainWindow.setViewportView(tblClients);

        btnGetClients.setText("Get Clients");
        btnGetClients.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGetClientsMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGetClients)
                    .addComponent(mainWindow, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(pnlNotifications, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlNotifications, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mainWindow, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGetClients)
                        .addContainerGap(73, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    private class updateNotifications extends TimerTask {
        public updateNotifications() {}
        
        public void run() {
            // TODO resolve potential concurrency issues here
            List<String> notifications = f_user.getNotifications();
            if (notifications.isEmpty() == false) {
                for (String notification : notifications) {
                    txtaNotifications.append("\n[" + new SimpleDateFormat("dd/MM/yyyy - HH:mm:ss").format(Calendar.getInstance().getTime())  + "] " + notification);
                    f_user.removeFirstNotification();
                }
            }
        }
    }
    
    private void btnGetClientsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGetClientsMouseClicked
        this.updateClients();
    }//GEN-LAST:event_btnGetClientsMouseClicked
 
    public void updateClients() {       
        try {
            List<Client> clients = f_user.getAllClients();
            DefaultTableModel model = new DefaultTableModel();
            
            model.addColumn("Id");
            model.addColumn("Client type");
            
            for (Client client : clients) {
                model.addRow(new Object[]{(new Integer(client.ID)).toString(), (client.clientType).toString()});
                // System.out.println("trying to add a row with a client");
            }
            this.tblClients.setModel(model);
            
        } catch(MultipleInteractionException e) {
            System.out.println("error multiple interactions at user.");
        } catch(AbsentException e) {
            System.out.println("the user is not present in the system.");
        } catch(TakeoverException e) {
            // TODO do something here
        }
    }
    
    @Override
    public void update() {
        // TODO add method here for updating when this panel is being focused
        this.updateClients();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGetClients;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane mainWindow;
    private javax.swing.JPanel pnlNotifications;
    private javax.swing.JTable tblClients;
    private javax.swing.JTextArea txtaNotifications;
    // End of variables declaration//GEN-END:variables
}
