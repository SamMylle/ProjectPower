/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;
import client.*;
import java.util.List;
import java.util.Vector;
import client.util.*;
import client.exception.*;
import java.awt.Component;
import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.ListModel;
import javax.swing.event.ListDataListener;


/**
 *
 * @author federico
 */
public class LightsPanel extends javax.swing.JPanel implements PanelInterface {

    private DistUser f_user;
    private LightsListModel f_lightsModel;
    
    
    /**
     * Creates new form LightsPanel
     */
    public LightsPanel(DistUser user) {
        initComponents();
        
        f_user = user;
        f_lightsModel = new LightsListModel();
        // lstLights.setCellRenderer(new customCellListRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstLights = new javax.swing.JList<>();
        btnLightsOn = new javax.swing.JButton();
        btnLightsOff = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(600, 400));

        lstLights.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstLights.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstLightsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lstLights);

        btnLightsOn.setText("Turn lights on");
        btnLightsOn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLightsOnMouseClicked(evt);
            }
        });

        btnLightsOff.setText("Turn lights off");
        btnLightsOff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLightsOffMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnLightsOn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLightsOff, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(112, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(btnLightsOn)
                        .addGap(18, 18, 18)
                        .addComponent(btnLightsOff)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lstLightsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstLightsMouseClicked
        if (evt.getClickCount() == 2) {
            int lstIndex = lstLights.getSelectedIndex();
            int newState = Integer.parseInt( (String) JOptionPane.showInputDialog(this, 
                "New light state: ", "Set light state", 
                JOptionPane.PLAIN_MESSAGE, 
                null, 
                null, 
                ""));
            
            LightState state = (LightState) (f_lightsModel.getElementAt(lstIndex));
            int lightID = state.ID;
            
            try {
                f_user.setLightState(newState, lightID);
                this.getLights();
            } catch (MultipleInteractionException ex) {
                DialogExceptions.notifyMultipleInteraction(this);
                return;
            } catch (AbsentException ex) {
                DialogExceptions.notifyAbsent(this, "setting a light state");
                return;
            } catch (TakeoverException ex) {
                DialogExceptions.notifyTakeover(this);
                return;
            } catch (ElectionBusyException e) {
    			DialogExceptions.notifyElectionBusy(this);
    			return;
    		}
            
        }
    }//GEN-LAST:event_lstLightsMouseClicked

    private void btnLightsOnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLightsOnMouseClicked
        try {
            this.setAllLights(100);
            this.getLights();
        } catch (MultipleInteractionException ex) {
            DialogExceptions.notifyMultipleInteraction(this);
            return;
        } catch (AbsentException ex) {
            DialogExceptions.notifyAbsent(this, "setting the states of lights");
            return;
        } catch (TakeoverException ex) {
            DialogExceptions.notifyTakeover(this);
            return;
        } catch (ElectionBusyException e) {
			DialogExceptions.notifyElectionBusy(this);
			return;
		}
    }//GEN-LAST:event_btnLightsOnMouseClicked

    private void btnLightsOffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLightsOffMouseClicked
        try {
            this.setAllLights(0);
            this.getLights();
        } catch (MultipleInteractionException ex) {
            DialogExceptions.notifyMultipleInteraction(this);
            return;
        } catch (AbsentException ex) {
            DialogExceptions.notifyAbsent(this, "setting the states of lights");
            return;
        } catch (TakeoverException ex) {
            DialogExceptions.notifyTakeover(this);
            return;
        } catch (ElectionBusyException e) {
			DialogExceptions.notifyElectionBusy(this);
			return;
		}
    }//GEN-LAST:event_btnLightsOffMouseClicked

    public void setAllLights(int state) throws MultipleInteractionException, AbsentException, TakeoverException, ElectionBusyException {
        List<LightState> lightstates = f_lightsModel.getStates();
        
        for (LightState lightstate : lightstates) {
            f_user.setLightState(state, lightstate.ID);
        }
    }
    
    public void getLights() throws MultipleInteractionException, AbsentException, TakeoverException, ElectionBusyException {
        List<LightState> lightstates = null;

        lightstates = f_user.getLightStates();
        
        f_lightsModel = new LightsListModel();
        for (LightState state : lightstates) {
            f_lightsModel.addItem(state);
        }
        lstLights.setModel(f_lightsModel);
    }
    
    @Override
    public void update() {
        try {
            this.getLights();
        } catch (MultipleInteractionException ex) {
            DialogExceptions.notifyMultipleInteraction(this);
            return;
        } catch (AbsentException ex) {
            DialogExceptions.notifyAbsent(this, "getting the states of lights");
            return;
        } catch (TakeoverException ex) {
            DialogExceptions.notifyTakeover(this);
            return;
        } catch (ElectionBusyException e) {
			DialogExceptions.notifyElectionBusy(this);
			return;
		}
    }
    
    private class customCellListRenderer extends JLabel implements ListCellRenderer {

        public customCellListRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            setText(value.toString());

            // based on the index you set the color.  This produces the every other effect.
            if (index % 2 == 0) setBackground(Color.WHITE);
            else setBackground(new Color(192,192,192));

            return this;
        }
    }
    
    
    private class LightsListModel implements ListModel {

        private List<LightState> f_lightStates;
        
        public LightsListModel() {
            f_lightStates = new Vector<LightState>();
        }
        
        @Override
        public int getSize() {
            return f_lightStates.size();
        }

        @Override
        public Object getElementAt(int index) {
            return f_lightStates.get(index);
        }

        public void addItem(LightState lightstate) {
            f_lightStates.add(lightstate);
        }
        
        public List<LightState> getStates() {
            return f_lightStates;
        }
        
        @Override
        public void addListDataListener(ListDataListener l) {
        }

        @Override
        public void removeListDataListener(ListDataListener l) {
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLightsOff;
    private javax.swing.JButton btnLightsOn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> lstLights;
    // End of variables declaration//GEN-END:variables
}
