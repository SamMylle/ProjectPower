/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import client.DistUser;
import client.exception.*;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import javax.swing.WindowConstants;
import javax.swing.JFrame;
import java.util.Vector;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;

/**
 *
 * @author federico
 */
public class DirectFridgeFrame extends javax.swing.JFrame {

    
    DistUser f_user;
    Vector<String> f_fridgeItems;

    /**
     * Creates new form DirectFridgeFrame
     */
    public DirectFridgeFrame(DistUser user) {
        initComponents();
        
        f_user = user;
        f_fridgeItems = new Vector<String>();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.updateFridgeItems();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblFridgeInventory = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tblFridgeInventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblFridgeInventory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblFridgeInventoryKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblFridgeInventory);

        btnDelete.setText("Remove item");
        btnDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDeleteMouseClicked(evt);
            }
        });

        btnAdd.setText("Add item");
        btnAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddMouseClicked(evt);
            }
        });

        btnClose.setText("Stop communication");
        btnClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCloseMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnClose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(137, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClose))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(164, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            f_user.closeFridge();
        } catch (AbsentException e) {
            JOptionPane.showMessageDialog(this,
                "You should be present in the house before you try to close the fridge.",
                "Error: not present",
                JOptionPane.ERROR_MESSAGE);
        } catch (TakeoverException e) {
            // Do nothing here, since the takeover results in the direct communication being closed
        } catch (NoFridgeConnectionException e) {
            // In theory, do nothing here since no connection is available anymore already.
        }
    }//GEN-LAST:event_formWindowClosing

    private void tblFridgeInventoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblFridgeInventoryKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            this.deleteSelectedItem();
        }
    }//GEN-LAST:event_tblFridgeInventoryKeyPressed

    private void btnDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseClicked
        this.deleteSelectedItem();
    }//GEN-LAST:event_btnDeleteMouseClicked

    private void btnAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseClicked
        String newItem = (String) JOptionPane.showInputDialog(this, 
                "Enter the new item", "Add item to fridge", 
                JOptionPane.PLAIN_MESSAGE, 
                null, 
                null, 
                "");
        
         try {
            f_user.addItemFridge(newItem);
        } catch (NoFridgeConnectionException e) {
            // TODO do something here
        } catch (AbsentException e) {
            // TODO do something here
        } catch (TakeoverException e) {
            // TODO do something here
        }
        this.updateFridgeItems();
    }//GEN-LAST:event_btnAddMouseClicked

    private void btnCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCloseMouseClicked
        // TODO add your handling code here:
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_btnCloseMouseClicked

    private void deleteSelectedItem() {
        int selectedIndex = tblFridgeInventory.getSelectedRow();
        
        if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(this,
                "Please select an index when deleting a specific item.",
                "Error: remove item",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            f_user.removeItemFridge(f_fridgeItems.get(selectedIndex));
        } catch (NoFridgeConnectionException e) {
            // TODO do something here
        } catch (AbsentException e) {
            // TODO do something here
        } catch (TakeoverException e) {
            // TODO do something here
        }
        this.updateFridgeItems();
    }
    
    private void updateFridgeItems() {
        List<String> items = null;
        try {
            items = f_user.getFridgeItemsDirectly();
        } catch (NoFridgeConnectionException e) {
            // TODO do something here
        } catch (AbsentException e) {
            // TODO do something here
        } catch (TakeoverException e) {
            // TODO do something here
        }
         DefaultTableModel model = new DefaultTableModel();
            
        model.addColumn("Items");
        
        f_fridgeItems = new Vector<String>();
        for (String item : items) {
            f_fridgeItems.add(item);
            model.addRow(new Object[]{item});
        }
        this.tblFridgeInventory.setModel(model);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblFridgeInventory;
    // End of variables declaration//GEN-END:variables
}
