/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import client.DistUser;
import client.DistTemperatureSensor;
import controller.DistController;
import avro.ProjectPower.*;
import java.util.List;
import client.exception.*;
import javax.swing.table.*;
import javax.swing.JTable;
import gui.ClientsPanel;
import avro.ProjectPower.ControllerComm;
import client.DistLight;
import java.awt.Component;
import client.DistSmartFridge;
import java.awt.Color;
import java.awt.Font;
import java.util.Vector;
import javax.swing.JOptionPane;
import org.apache.avro.AvroRemoteException;

/**
 *
 * @author federico
 */
public class UserWindow extends javax.swing.JFrame {

    private DistUser f_user;
    
    /**
     * Creates new form MainWindow
     */
    public UserWindow(String ownIP, String serverIP, int controllerPort) {
        initComponents();
        try {
            f_user = new DistUser("", ownIP, serverIP, controllerPort);
        } catch (IOControllerException e) {
            JOptionPane.showMessageDialog(this,
                "Could not connect to the controller on startup... aborting.",
                "Error: could not connect",
                JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
        
        jtpPanelSwitch.addTab("General", new GeneralPanel(f_user));
        jtpPanelSwitch.addTab("Clients", new ClientsPanel(f_user));
        jtpPanelSwitch.addTab("Temperature", new TemperaturePanel(f_user));
        jtpPanelSwitch.addTab("Lights", new LightsPanel(f_user));
        jtpPanelSwitch.addTab("Fridge", new FridgePanel(f_user));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtpPanelSwitch = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 500));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jtpPanelSwitch.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jtpPanelSwitchStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtpPanelSwitch, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtpPanelSwitch, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtpPanelSwitchStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jtpPanelSwitchStateChanged
        // TODO add your handling code here:

        Component comp = jtpPanelSwitch.getSelectedComponent();
        PanelInterface panelinterface = (PanelInterface) comp;
        panelinterface.update();
    }//GEN-LAST:event_jtpPanelSwitchStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        f_user.disconnect();
    }//GEN-LAST:event_formWindowClosing

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        
		String _clientIP = "";
		String _serverIP = "";
		int _controllerPort = 0;
		try {
			_clientIP = System.getProperty("clientip");
			_serverIP = System.getProperty("ip");
			_controllerPort = Integer.parseInt(System.getProperty("controllerport"));			
		} catch (Exception e) {
			System.err.println("Not all arguments have been given (correctly) when running the program.\nNeeded arguments:(\"ip\", \"clientip\", \"controllerport\")");
			System.exit(1);
		}
		
		final String clientIP = _clientIP;
		final String serverIP = _serverIP;
		final int controllerPort = _controllerPort;
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserWindow(clientIP, serverIP, controllerPort).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane jtpPanelSwitch;
    // End of variables declaration//GEN-END:variables
}
