/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package avro.ProjectPower;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CommData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CommData\",\"namespace\":\"avro.ProjectPower\",\"fields\":[{\"name\":\"ID\",\"type\":\"int\"},{\"name\":\"IP\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int ID;
  @Deprecated public java.lang.CharSequence IP;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public CommData() {}

  /**
   * All-args constructor.
   */
  public CommData(java.lang.Integer ID, java.lang.CharSequence IP) {
    this.ID = ID;
    this.IP = IP;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ID;
    case 1: return IP;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ID = (java.lang.Integer)value$; break;
    case 1: IP = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ID' field.
   */
  public java.lang.Integer getID() {
    return ID;
  }

  /**
   * Sets the value of the 'ID' field.
   * @param value the value to set.
   */
  public void setID(java.lang.Integer value) {
    this.ID = value;
  }

  /**
   * Gets the value of the 'IP' field.
   */
  public java.lang.CharSequence getIP() {
    return IP;
  }

  /**
   * Sets the value of the 'IP' field.
   * @param value the value to set.
   */
  public void setIP(java.lang.CharSequence value) {
    this.IP = value;
  }

  /** Creates a new CommData RecordBuilder */
  public static avro.ProjectPower.CommData.Builder newBuilder() {
    return new avro.ProjectPower.CommData.Builder();
  }
  
  /** Creates a new CommData RecordBuilder by copying an existing Builder */
  public static avro.ProjectPower.CommData.Builder newBuilder(avro.ProjectPower.CommData.Builder other) {
    return new avro.ProjectPower.CommData.Builder(other);
  }
  
  /** Creates a new CommData RecordBuilder by copying an existing CommData instance */
  public static avro.ProjectPower.CommData.Builder newBuilder(avro.ProjectPower.CommData other) {
    return new avro.ProjectPower.CommData.Builder(other);
  }
  
  /**
   * RecordBuilder for CommData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CommData>
    implements org.apache.avro.data.RecordBuilder<CommData> {

    private int ID;
    private java.lang.CharSequence IP;

    /** Creates a new Builder */
    private Builder() {
      super(avro.ProjectPower.CommData.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(avro.ProjectPower.CommData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ID)) {
        this.ID = data().deepCopy(fields()[0].schema(), other.ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.IP)) {
        this.IP = data().deepCopy(fields()[1].schema(), other.IP);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing CommData instance */
    private Builder(avro.ProjectPower.CommData other) {
            super(avro.ProjectPower.CommData.SCHEMA$);
      if (isValidValue(fields()[0], other.ID)) {
        this.ID = data().deepCopy(fields()[0].schema(), other.ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.IP)) {
        this.IP = data().deepCopy(fields()[1].schema(), other.IP);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'ID' field */
    public java.lang.Integer getID() {
      return ID;
    }
    
    /** Sets the value of the 'ID' field */
    public avro.ProjectPower.CommData.Builder setID(int value) {
      validate(fields()[0], value);
      this.ID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'ID' field has been set */
    public boolean hasID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'ID' field */
    public avro.ProjectPower.CommData.Builder clearID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'IP' field */
    public java.lang.CharSequence getIP() {
      return IP;
    }
    
    /** Sets the value of the 'IP' field */
    public avro.ProjectPower.CommData.Builder setIP(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.IP = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'IP' field has been set */
    public boolean hasIP() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'IP' field */
    public avro.ProjectPower.CommData.Builder clearIP() {
      IP = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public CommData build() {
      try {
        CommData record = new CommData();
        record.ID = fieldSetFlags()[0] ? this.ID : (java.lang.Integer) defaultValue(fields()[0]);
        record.IP = fieldSetFlags()[1] ? this.IP : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
